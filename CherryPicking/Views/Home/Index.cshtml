@model CherryPicking.Models.CherryPickerModel

<!DOCTYPE html>
<html>
<head>
    <title>Cherry Picker Game</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #292929; /* Set background color */
            font-family: 'Arial', sans-serif; /* Choose a fun font */
            color: #fff; /* Set text color */
            margin: 0; /* Remove default margin */
            padding: 0; /* Remove default padding */
            overflow:hidden;
        }

        .grid-container {
            background-color: #444; /* Set container background color */
            padding: 20px;
            border-radius: 10px; /* Add rounded corners to the container */
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3); /* Add shadow effect */
            /* margin-top: 50px; */
            position: relative; /* Position relative for absolute header and footer */
            min-height: calc(100vh - 200px); /* Minimum height to push footer down */
            margin-bottom: 50px; /* Add margin at the bottom */
        }

        .header {
            background-color: #333; /* Set header and footer background color */
            color: #fff; /* Set header and footer text color */
            padding: 10px; /* Add padding */
            width: 100%; /* Full width */
            left: 0; /* Align left */
        }

        .header {
            top: 0; /* Align header to the top */
            position: fixed; /* Fixed position for header */
        }

        .footer {
            display: none;
        }

        .cell {
            width: 50px; /* Adjust width as needed */
            height: 50px; /* Adjust height as needed */
            line-height: 50px; /* Vertically center the content */
            padding: 0; /* Remove padding */
            text-align: center; /* Center content horizontally */
            background-color: #777; /* Set button background color */
            border: 2px solid #666; /* Add border */
            border-radius: 5px; /* Add rounded corners */
            cursor: pointer; /* Change cursor to pointer on hover */
            margin: 2px; /* Add margin for better visibility */
        }

            .cell:hover {
                background-color: #999; /* Change background color on hover */
            }

        /* Style for fruit icon */
        .fruit {
            font-size: 24px; /* Adjust font size as needed */
            color: red; /* Set color for fruit icon */
        }

        /* Style for block icon */
        .block {
            font-size: 24px; /* Adjust font size as needed */
            color: #333; /* Set color for block icon */
        }

        .cherries-picked, .max-cherries {
            font-size: 18px; /* Adjust font size as needed */
            margin-top: 20px;
        }

        #resetGameBtn {
            margin-top: 20px;
        }


        /* Add style for the selected cell */
        .selected-cell {
            background-color: #444 !important; /* Darker background color */
            color: #fff; /* White text color */
            border: 2px solid #950740;
        }

        .ml-2, .btn-outline-primary {
            color: #fff;
            margin-top: 20px;
            border: 1px solid #950740;
        }

        .btn-outline-primary {
            background-color: #950740;
        }

            .btn-outline-primary:hover {
                color: #950740;
                transition: .3s;
                border: 1px solid #950740;
                background: transparent;
            }

        .reset:hover {
            color: #fff;
            background: #950740;
            transition: .3s;
            border: 1px solid #950740;
        }

        .table-bordered td, .table-bordered th, .table-bordered tr, .table-bordered {
            border: none;
        }


        .table-bordered {
            background: rgba(255,255,255,.1);
            backdrop-filter: blur(30px);
            box-shadow: 1px 2px 28px 0px rgba(255,0,102,1);
            border-radius: 2rem;
            padding-top: 20px;
        }

        h1 {
            font-size: 2rem;
        }

        .table-bordered {
            width: 350px;
            height: 350px;
        }

        .btn-outline-dark {
            width: 85px;
            height: 85px;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            margin-top: -10px;
        }

        .btn-container, .result-container {
            display: flex;
            justify-content: center;
            align-content: center;
            gap: 2rem;
        }

        .cell:hover {
            border: 2px solid #950740;
            transition: .3s;
        }

        h2 {
            font-size: 1.5rem;
            padding: 25px;
        }

        /* Message on modal */
        #messageBody {
            color: #000;
        }

        /*Label on modal*/
        #messageModalLabel {
            color: #000;
        }

        .hidden {
            display: none;
        }

        /* Style for the modal dialog */
        .modal-content {
            background-color: #444;
            color: #fff;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            background-color: #333;
            color: #fff;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            padding: 15px;
            border-bottom: none;
        }

        .modal-body {
            background-color: #444;
            padding: 20px;
        }

        .modal-footer {
            background-color: #333;
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px;
            padding: 15px;
            border-top: none;
        }

        /* Close button style */
        .close {
            color: #fff;
            opacity: 1;
            outline: none;
        }

      .close:hover {
          color: #fff;
          opacity: 0.8;
       }

        /* Button style */
        .btn {
            background-color: #950740;
            border-color: #950740;
        }

       .btn:hover {
           background-color: #74062c;
           border-color: #74062c;
       }

        /* Text color */
        #messageBody, #messageModalLabel {
            color: #fff;
        }

        .label {
            text-align: center; /* Center the label text */
            font-size: 12px; /* Adjust font size as needed */
           /*  margin-top: 5px; */ /* Add margin on top of the label */
            color: white; /* Set text color */
        }

        .cell-wrapper {
            position: relative; /* Position the wrapper relative to its container */
        }

         /* Add margin to each row except the last one */
        .table-bordered tbody tr:not(:last-child) {
            margin-bottom: 7px;
        } 


    </style>
</head>
<body>
    <div class="header">
        <h1 class="text-center">Welcome to Fruit Pickup Game</h1>
    </div>
    <div id="toast" class="hidden"></div>
    <!-- Modal for Instructions -->
    <div class="modal fade" id="instructionsModal" tabindex="-1" aria-labelledby="instructionsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="instructionsModalLabel">Instructions</h5>
                </div>
                <div class="modal-body">
                    <h4>How to Play:</h4>
                    <ol>
                        <li>Start at the top-left corner and reach the bottom-right corner.</li>
                        <li>Pick up cherries by moving right or down through cells with cherries.</li>
                        <li>Avoid thorns, represented by cells with blocks.</li>
                        <li>After reaching the bottom-right corner, return to the top-left corner.</li>
                        <li>The game ends when you cannot find a path or return to the starting point.</li>
                    </ol>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Got it!</button>
                </div>
            </div>
        </div>
    </div>
    <!-- New Modal for Alert -->
    <div class="modal fade" id="positionAlertModal" tabindex="-1" aria-labelledby="positionAlertModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="positionAlertModalLabel">Alert</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>You must return to the starting position to calculate cherries.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <h2>Please play the game:</h2>
        <table id="gridTable" class="table table-bordered">
            <tbody>
                @for (int i = 0; i < Model.Grid.Length; i++)
                {
                    <tr>
                        @for (int j = 0; j < Model.Grid[i].Length; j++)
                        {
                            <td class="table-data">
                                <div class="cell-wrapper">
                                    <button class="cell btn btn-outline-dark" data-row="@i" data-col="@j" data-value="@Model.Grid[i][j]">
                                        @if (Model.Grid[i][j] == 1)
                                        {
                                            <span class="fruit">&#127826;</span>
                                        }
                                        else if (Model.Grid[i][j] == -1)
                                        {
                                            <span class="block">&#128683;</span>
                                        }
                                    </button>
                                    @if (i == 0 && j == 0)
                                    {
                                        <div class="label">Start Position</div> <!-- Label -->
                                    }
                                    @if (i == 2 && j == 2)
                                    {
                                        <div class="label">End Position</div> <!-- Label -->
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }

            </tbody>
        </table>
        <div class="result-container">
            <div class="cherries-picked">Cherries Picked: <span id="cherriesCount">0</span></div>
            <div class="max-cherries"> Excepted Results: <span id="idresults">0</span></div>
        </div>

        <div class="btn-container">
            <button id="resetGameBtn" class="btn btn-outline-primary">Reset Game</button>
            <button id="calculateCherriesBtn" class="btn btn-outline-primary ml-2">Calculate Cherries</button>
        </div>
    </div>

    <!-- Modal for GameOver -->
    <div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageModalLabel">Message</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="messageBody">
                    <!-- Message content will be inserted here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Include jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            var selectedRow = 0;
            var selectedCol = 0;
            var initialGridState = null;
            var instructionModalOpen = true;

            // Show instructions modal when the page loads for the first time
            $('#instructionsModal').modal('show');

            $('#instructionsModal').on('hidden.bs.modal', function () {
                instructionModalOpen = false; // Set the flag to false when instruction modal is closed
                initializeGrid();
                checkGameOver(); // Call checkGameOver() after closing the instruction modal
            });

            // Event handler for the "shown.bs.modal" event of the instructions modal
            $('#instructionsModal').on('shown.bs.modal', function () {
                instructionModalOpen = true; // Set the flag to true when instruction modal is opened
            });

            // Event listener for the "click" event of the "Got It" button in the instructions modal
            $('#instructionsModal .btn-primary').click(function () {
                // Close the instructions modal
                $('#instructionsModal').modal('hide');
            });

            // Function to initialize the grid with the initial state
            function initializeGrid() {
                if (initialGridState) {
                    for (var i = 0; i < initialGridState.length; i++) {
                        for (var j = 0; j < initialGridState[i].length; j++) {
                            var cellValue = initialGridState[i][j];
                            var cellButton = $('button[data-row="' + i + '"][data-col="' + j + '"]');
                            cellButton.data('value', cellValue);
                            if (cellValue === 1) {
                                cellButton.html('<span class="fruit">&#127826;</span>');
                            } else if (cellValue === -1) {
                                cellButton.html('<span class="block">&#128683;</span>');
                            } else {
                                cellButton.html('');
                            }
                        }
                    }
                }
            }

            // Function to store the initial grid state
            function storeInitialGridState() {
                initialGridState = [];
                $('#gridTable tbody tr').each(function () {
                    var rowData = [];
                    $(this).find('td button').each(function () {
                        rowData.push(parseInt($(this).data('value')));
                    });
                    initialGridState.push(rowData);
                });
            }

            // ShowMessage on modal
            function showMessage(message) {
                $('#messageBody').text(message);
                $('#messageModal').modal('show');
            }

            // Function to close the dialog
            function closeModal() {
                $('#messageModal').modal('hide');
            }

            $('#messageModal').modal({
                backdrop: 'static', // Prevent closing from outside
                keyboard: false // Prevent closing with the Escape key
            });

            // Event handler for the close button
            $('#messageModal .modal-footer .btn-secondary').click(function () {
                closeModal();
                resetGame();
            });

            // Event handler for the X button
            $('#messageModal .modal-header .close').click(function () {
                closeModal();
                resetGame();
            });

            function checkGameOver() {
                if (!instructionModalOpen) { // Only check for game over if instruction modal is not open
                    var isCell00Blocked = isCellBlocked(0, 0);
                    var isCell22Blocked = isCellBlocked(2, 2);

                    if (isCell00Blocked && isCell22Blocked) {
                        // Both starting and ending positions are blocked
                        showMessage('Game Over! Both starting and ending positions are blocked.');
                    } else if (isCell00Blocked) {
                        // Position [0,0] contains a blocked icon
                        showMessage('Game Over! Starting position is blocked.');
                    } else if (isCell22Blocked) {
                        // Position [2,2] contains a blocked icon
                        showMessage('Game Over! Ending position is blocked.');
                    }
                }
            }

            checkGameOver();

            // Function to reset the game
            function resetGame() {
                // Reset all cells
                $('.cell').each(function () {
                    var randomValue = Math.random();
                    if (randomValue < 0.5) {
                        $(this).data('value', 1); // 50% chance for cherry
                        $(this).html('<span class="fruit">&#127826;</span>'); // Add cherry icon
                    } else if (randomValue < 0.75) {
                        $(this).data('value', -1); // 25% chance for block
                        $(this).html('<span class="block">&#128683;</span>'); // Add block icon
                    } else {
                        $(this).data('value', 0); // 25% chance for empty cell
                        $(this).html(''); // Empty cell
                    }
                });

                // Store the initial grid state
                storeInitialGridState();

                // Initialize the grid with the initial state
                initializeGrid();

                // Select the appropriate cell based on the status of cell [0,0]
                var isCell00Blocked = isCellBlocked(0, 0);
                if (!isCell00Blocked) {
                    selectedRow = 0;
                    selectedCol = 0;
                } else {
                    selectedRow = 2;
                    selectedCol = 2;
                }

                // Update game variables after resetting the game
                updateGameVariables();

                // Remove selected-cell class from all cells
                $('.cell').removeClass('selected-cell');

                // Add selected-cell class to the selected cell
                $('button[data-row="' + selectedRow + '"][data-col="' + selectedCol + '"]').addClass('selected-cell');
            }

            // Function to update the game variables and display counts
            function updateGameVariables() {
                var cherriesPicked = 0;
                var maxCherries = 0;
                var results = 0;

                $('.cell').each(function () {
                    if ($(this).data('value') === 1) {
                        maxCherries++;
                    }
                    if ($(this).data('value') === 1 && $(this).html() === '<span class="fruit">&#127826;</span>') {
                        cherriesPicked++;
                    }
                });
                $('#cherriesCount').text(cherriesPicked);
                $('#maxCherries').text(maxCherries);
                $('#idresults').text(results);
            }

            // Function to check if a cell is blocked
            function isCellBlocked(row, col) {
                return $('button[data-row="' + row + '"][data-col="' + col + '"]').data('value') === -1;
            }

            // Function to pick up a cherry
            function pickCherry(cell) {
                var value = cell.data('value');

                if (value === 1) {
                    // If the cell contains a cherry, pick it up
                    cell.data('value', 0);
                    cell.html(''); // Clear the content of the cell
                    // Increment the cherries picked count and update the displayed count
                    var cherriesPicked = parseInt($('#cherriesCount').text()) + 1;
                    $('#cherriesCount').text(cherriesPicked);
                }
            }

            // Function to move the selected cell
            function moveSelection(rowOffset, colOffset) {
                var newRow = selectedRow + rowOffset;
                var newCol = selectedCol + colOffset;

                // Check if the new cell is within the bounds of the grid
                if (newRow >= 0 && newRow < $('tr').length && newCol >= 0 && newCol < $('tr:first td').length) {
                    var nextCell = $('button[data-row="' + newRow + '"][data-col="' + newCol + '"]');
                    if (!isCellBlocked(newRow, newCol)) {
                        $('.cell').removeClass('selected-cell'); // Remove selected class from all cells
                        nextCell.addClass('selected-cell'); // Add selected class to the next cell
                        selectedRow = newRow;
                        selectedCol = newCol;
                    }
                }
            }

            // Keyboard event handler for playing with keys
            $(document).keydown(function (event) {
                switch (event.keyCode) {
                    case 37: // Left arrow
                        moveSelection(0, -1);
                        break;
                    case 38: // Up arrow
                        moveSelection(-1, 0);
                        break;
                    case 39: // Right arrow
                        moveSelection(0, 1);
                        break;
                    case 40: // Down arrow
                        moveSelection(1, 0);
                        break;
                    case 13: // Enter key
                        var currentCell = $('button[data-row="' + selectedRow + '"][data-col="' + selectedCol + '"]');
                        pickCherry(currentCell);
                        break;
                    default:
                        return; // Exit if the key pressed is not an arrow key or Enter key
                }

                event.preventDefault(); // Prevent default browser behavior for arrow keys and Enter key
            });

            // Initialize the game
            resetGame();

            // Button click event handler for resetting the game
            $('#resetGameBtn').click(function () {

                resetGame();
                // setTimeout(function () {
                checkGameOver(); // Call checkGameOver() after a delay of 1 second
                // }, 1000); // 1000 milliseconds = 1 second
            });

            // Event handler for the close button in the position alert modal footer
            $('#positionAlertModal .modal-footer .btn-secondary').click(function () {
                $('#positionAlertModal').modal('hide'); // Close the position alert modal
            });

            // Event handler for the close button in the position alert modal header
            $('#positionAlertModal .modal-header .close').click(function () {
                $('#positionAlertModal').modal('hide'); // Close the position alert modal
            });

            // Button click event handler for calculating cherries
            $('#calculateCherriesBtn').click(function () {
                var isCell00Selected = $('button[data-row="0"][data-col="0"]').hasClass('selected-cell');

                // Check if the selected cell is at position 0,0
                if (!isCell00Selected) {
                    $('#positionAlertModal').modal('show'); // Show the alert modal
                    return; // Exit the function if not at position 0,0
                }

                // Restore the initial grid state before calculating cherries
                initializeGrid();

                // Perform the calculation
                var grid = [];
                $('#gridTable tbody tr').each(function () {
                    var rowData = [];
                    $(this).find('td button').each(function () {
                        var value = parseInt($(this).data('value'));
                        rowData.push(value);
                    });
                    grid.push(rowData);
                });

                $.ajax({
                    url: '/Home/CalculateCherries',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(grid),
                    success: function (data) {
                        console.log(data); // Log the entire response data
                        $('#idresults').text(data.maxCherries);
                        if (data.maxCherries === 0) {
                            showMessage('Sorry to inform, algorithm can not calculate your fruit picked.');
                        } else {
                            var cherriesPickedMessage = 'You have picked ' + data.maxCherries + ' cherries.';
                            showMessage(cherriesPickedMessage);
                        }
                    },
                    error: function () {
                        alert('Error occurred while calculating cherries.');
                    }
                });
            });


        });
    </script>
</body>
</html>